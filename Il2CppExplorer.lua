if (explorer==nil or type(explorer) ~= 'table') then explorer={} end if explorer.debug==nil then explorer.debug=false end if (explorer.printAdvert==nil) then explorer.printAdvert=true end if (explorer.exitOnNotUnityGame==nil) then explorer.exitOnNotUnityGame=true end local libStart=0x0 explorer.maxStringLength=1000 local alphabet={} if explorer.printAdvert then print("âœ¨ Made with Il2CppExplorer by HTCheater") end if (explorer.exitOnNotUnityGame and #gg.getRangesList("global-metadata.dat") < 1) then print("ðŸ”´ Please, select Unity game") os.exit() end string.startsWith=function(self, str) return self:find("^"..str) ~= nil end string.endsWith=function(str, ending) return ending=="" or str:sub(-(#ending))==ending end string.toUpper=function(str) res, c=str:gsub("^%l", string.upper) return res end string.removeEnd=function(str, rem) return (str:gsub("^(.-)"..rem.."$", "%1")) end string.removeStart=function(str, rem) return (str:gsub("^"..rem.."(.-)$", "%1")) end local isx64=gg.getTargetInfo().x64 local metadata=gg.getRangesList("global-metadata.dat") if #metadata > 0 then metadata=metadata[1] end function explorer.setAllRanges() gg.setRanges(gg.REGION_JAVA_HEAP|gg.REGION_C_HEAP|gg.REGION_C_ALLOC|gg.REGION_C_DATA|gg.REGION_C_BSS | gg.REGION_PPSSPP|gg.REGION_ANONYMOUS|gg.REGION_JAVA|gg.REGION_STACK|gg.REGION_ASHMEM | gg.REGION_VIDEO|gg.REGION_OTHER|gg.REGION_BAD|gg.REGION_CODE_APP|gg.REGION_CODE_SYS) end function explorer.isClassPointer(address) local t={} t[1]={} t[1].address=address-(isx64 and 0x10 or 0x8) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_WRITABLE) if t[1]==nil then return false end t[1].address=address-(isx64 and 0x8 or 0x4) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_NO) if t[1]==nil then return false end t[1].address=address+(isx64 and 0x8 or 0x4) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_READ_ONLY) if t[1]==nil then return false end return true end function explorer.getInstances(classname) if type(classname) ~= 'string' then explorer.print("ðŸ”´ explorer.getInstances: expected string for parameter classname, got "..type(classname)) return {} end explorer.setAllRanges() gg.clearResults() local stringBytes=gg.bytes(classname, "UTF-8") local searchStr="0" for k, v in ipairs(stringBytes) do searchStr=searchStr.."; "..v end searchStr=searchStr.."; 0::"..(2+#stringBytes) gg.searchNumber(searchStr, gg.TYPE_BYTE, false, gg.SIGN_EQUAL, metadata.start, metadata["end"], 2) if gg.getResultsCount() < 1 then if debug then print("ðŸ”´ explorer.getInstances: can't find "..classname.." in metadata") end local r={} return r end local r={} r[1]=gg.getResults(2)[2] local addr=0x0 for k, v in pairs(gg.getRangesList("libc_malloc")) do gg.clearResults() gg.searchNumber(string.format("%X", r[1].address).."h", isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD, false, gg.SIGN_EQUAL, v.start, v["end"], 0) local results=gg.getResults(100) gg.clearResults() for i, res in ipairs(results) do if explorer.isClassPointer(res.address)==true then addr=res.address break end end if addr > 0 then break end end if addr==0 then if debug then explorer.print("ðŸ”´ explorer.getInstances: there is no valid pointer for "..classname) end local r={} return r end gg.setRanges(gg.REGION_ANONYMOUS) gg.loadResults(gg.getResults(1)) r={} r[1]={} r[1].address=addr-(isx64 and 0x10 or 0x8) r[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.loadResults(r) gg.searchPointer(0) r=gg.getResults(100000) if gg.getResultsCount()==0 and debug then explorer.print("ðŸ”´ explorer.getInstances: there are no instances for the "..classname .. ", try to load the class first") end gg.clearResults() return r end function explorer.patchLib(offset, offsetX32, patchedBytes, patchedBytesX32) gg.clearResults() if libStart==0 then explorer.getLib() end local patch={} if not isx64 then patchedBytes=patchedBytesX32 offset=offsetX32 end if (patchedBytes==nil or offset==nil) then explorer.print("ðŸ”´ explorer.patchLib: there is no valid patch for current architecture") return end local currAddress=libStart+offset for k, v in ipairs(patchedBytes) do local t={} t[1]={} t[1].address=currAddress t[1].flags=gg.TYPE_DWORD if type(v)=="number" then t[1].value=v gg.setValues(t) end if type(v)=="string" then if v:startsWith("h") then t[1].value=v gg.setValues(t) else t[1].value=(isx64 and "~A8 " or "~A ")..v gg.setValues(t) end end currAddress=currAddress+4 end end function explorer.getLibStart() return libStart end function explorer.getLib() explorer.setAllRanges() local libil2cpp if gg.getRangesList("libil2cpp.so")[1] ~= nil then libStart=gg.getRangesList("libil2cpp.so")[1].start return end local ranges=gg.getRangesList("bionic_alloc_small_objects") for i, range in pairs(ranges) do gg.searchNumber("47;108;105;98;105;108;50;99;112;112;46;115;111;0::14", gg.TYPE_BYTE, false, gg.SIGN_EQUAL, range['start'], range['end'], 1) gg.refineNumber("47", gg.TYPE_BYTE) if gg.getResultsCount() ~= 0 then local str=gg.getResults(1)[1] gg.clearResults() addr=str.address while explorer.readByte(addr) ~= 0 do addr=addr-1 end local t={} t[1]={} t[1].address=addr+1 t[1].flags=gg.TYPE_BYTE for k, v in pairs(gg.getRangesList("linker_alloc")) do gg.clearResults() gg.loadResults(t) gg.searchPointer(0, v['start'], v['end']) for index, res in pairs(gg.getResults(1)) do local t={} t[1]={} t[1].address=res.address-(isx64 and 0x8 or 0x4) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.loadResults(t) local pointers=gg.getResults(1, 0, nil, nil, nil, nil, nil, nil, gg.POINTER_EXECUTABLE) if #pointers ~= 0 then libStart=explorer.readPointer(t[1].address) break end end end break end end if libStart==0x0 then explorer.print("ðŸ”´ explorer.getLib: failed to get libil2cpp.so address, try entering the game first") end end function explorer.getField(instance, offset, offsetX32, type) if type(instance) ~= 'table' then explorer.print("ðŸ”´ explorer.getField: expected table for parameter instance, got "..type(instance)) return nil end if type(instance.address) ~= 'number' then explorer.print("ðŸ”´ explorer.getField: expected number for instance.address, got "..type(instance.address)) return nil end if not isx64 then offset=offsetX32 end if offset==nil then explorer.print("ðŸ”´ explorer.getField: offset for this architecture is not specified") return nil end return explorer.readValue(instance.address+offset, type) end function explorer.editField(instance, offset, offsetX32, type, value) if type(instance) ~= 'table' then explorer.print("ðŸ”´ explorer.editField: expected table for parameter instance, got "..type(instance)) return end if type(instance.address) ~= 'number' then explorer.print("ðŸ”´ explorer.editField: expected number for instance.address, got "..type(instance.address)) return end if type(type) ~= 'number' then explorer.print("ðŸ”´ explorer.editField: expected number for parameter type, got "..type(type)) return end if type(value) ~= 'number' then explorer.print("ðŸ”´ explorer.editField: expected number for parameter value, got "..type(value)) return end if not isx64 then offset=offsetX32 end if offset==nil then explorer.print("ðŸ”´ explorer.editField: offset for this architecture is not specified") return end local t={} t[1]={} t[1].address=instance.address+offset t[1].flags=type t[1].value=value gg.setValues(t) end function explorer.getFunction(className, functionName) if type(functionName) ~= 'string' then explorer.print("ðŸ”´ explorer.getFunction: expected string for parameter functionName, got " .. type(functionName)) return nil end if ((type(className) ~= 'nil') and (type(className) ~= 'string')) then explorer.print("ðŸ”´ explorer.getFunction: expected string for parameter className, got "..type(className)) return nil end explorer.setAllRanges() gg.clearResults() local stringBytes=gg.bytes(functionName, "UTF-8") local searchStr="0" for k, v in ipairs(stringBytes) do searchStr=searchStr.."; "..v end searchStr=searchStr.."; 0::"..(2+#stringBytes) gg.searchNumber(searchStr, gg.TYPE_BYTE, false, gg.SIGN_EQUAL, metadata.start, metadata["end"], (className==nil) and 2 or nil) gg.refineNumber("0; "..stringBytes[1], gg.TYPE_BYTE) gg.refineNumber(stringBytes[1], gg.TYPE_BYTE) if gg.getResultsCount()==0 then explorer.print("Can't find "..functionName.." in metadata") local r={} return r end local addr=0x0 for index, result in pairs(gg.getResults(100000)) do for k, v in pairs(gg.getRangesList("libc_malloc")) do gg.clearResults() gg.searchNumber(string.format("%X", result.address).."h", isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD, false, gg.SIGN_EQUAL, v.start, v["end"], 0) local results=gg.getResults(100) gg.clearResults() for i, res in ipairs(results) do if explorer.isFunctionPointer(res.address, className) then addr=explorer.readPointer(res.address-(isx64 and 0x10 or 0x8)) break end end if addr > 0 then break end end end if addr==0 then explorer.print("ðŸ”´ explorer.getFunction: there is no valid pointer for "..functionName .. ((className==nil) and "" or (" in "..className))) return nil end if libStart==0 then explorer.getLib() end addr=addr-libStart explorer.print("ðŸŸ¢ explorer.getFunction: offset for "..functionName..": "..string.format('%X', addr)) return addr end function explorer.editFunction(className, functionName, patchedBytes, patchedBytesX32) if ((type(className) ~= 'nil') and (type(className) ~= 'string')) then explorer.print("ðŸ”´ explorer.editFunction: expected string or nil for parameter className, got " .. type(className)) return end if type(functionName) ~= 'string' then explorer.print("ðŸ”´ explorer.editFunction: expected string for parameter functionName, got " .. type(functionName)) return end local offs=explorer.getFunction(className, functionName) if (offs==nil) then return end explorer.patchLib(offs, offs, patchedBytes, patchedBytesX32) end function explorer.isFunctionPointer(address, className) local t={} t[1]={} t[1].address=address-(isx64 and 0x10 or 0x8) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_EXECUTABLE) if t[1]==nil then return false end t[1].address=address-(isx64 and 0x8 or 0x4) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_EXECUTABLE) if t[1]==nil then return false end t[1].address=address+(isx64 and 0x8 or 0x4) t[1].flags=isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD gg.clearResults() gg.loadResults(t) t=gg.getResults(1, nil, nil, nil, nil, nil, nil, nil, gg.POINTER_WRITABLE) if t[1]==nil then return false end if className ~= nil then currAddr = explorer.readPointer(explorer.readPointer(address+(isx64 and 0x8 or 0x4))+(isx64 and 0x10 or 0x8)) classBytes=gg.bytes(className, "UTF-8") for k, v in pairs(classBytes) do if (v ~= explorer.readByte(currAddr)) then return false end currAddr=currAddr+0x1 end end return true end function explorer.readValue(addr, type) if type(addr) ~= 'number' then explorer.print("ðŸ”´ explorer.readValue: expected number for parameter addr, got "..type(addr)) return 0 end if type(type) ~= 'number' then explorer.print("ðŸ”´ explorer.readValue: expected number for parameter type, got "..type(type)) return 0 end local t={} t[1]={} t[1].address=addr t[1].flags=type t=gg.getValues(t) return t[1].value end function explorer.readByte(addr) return explorer.readValue(addr, gg.TYPE_BYTE) end function explorer.readShort(addr) return explorer.readValue(addr, gg.TYPE_WORD) end function explorer.readInt(addr) return explorer.readValue(addr, gg.TYPE_DWORD) end function explorer.readPointer(addr) return explorer.readValue(addr, isx64 and gg.TYPE_QWORD or gg.TYPE_DWORD) end function explorer.print(str) if explorer.debug then print(str) end end function explorer.readString(addr) if type(addr) ~= 'number' then explorer.print('ðŸ”´ explorer.readString: wrong argument in explorer.readString: expected number, got ' .. type(addr)) return "" end local len=explorer.readInt(addr+(isx64 and 0x10 or 0x8)) if len > explorer.maxStringLength then return "" end local str="" for i=1, len, 1 do local c=explorer.readShort(addr+(isx64 and 0x14 or 0xC)+(2 * (i-1))) if (c > -1 and c < 129) then str=str..string.char(c)  else if (alphabet[c] ~= nil) then str=str..alphabet[c] else explorer.print('ðŸŸ¡ explorer.readString: unrecognised character '..c .. '. Consider adding it to the alphabet') end end end return str end function explorer.setAlphabet(str) if type(str) ~= 'string' then explorer.print('ðŸ”´ explorer.setAlphabet: wrong argument in explorer.setAlphabet: expected string, got ' .. type(str)) return end alphabet={} str:gsub("[%z\1-\127\194-\244][\128-\191]*", function(c) local bytes=gg.bytes(c, 'UTF-16LE') local utf8Chars='' for k, v in pairs(bytes) do utf8Chars=utf8Chars..string.char(v) end local short=string.unpack("<i2", utf8Chars) alphabet[short]=c end) end 